name: Build and Deploy to EC2

on:
  push:
    branches: [ "master" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        token: ${{ secrets.GIT_SUBMODULE_ACCESS_TOKEN }}
        submodules: true
    
    - name: Configure Environments
      run: |
        echo 'AWS_DEPLOYER_ROLE_ARN=${{ secrets.AWS_DEPLOYER_ROLE_ARN_PROD }}' >> $GITHUB_ENV
        echo 'AWS_EC2_SECURITY_GROUP_ID=${{ secrets.AWS_EC2_SECURITY_GROUP_ID_PROD }}' >> $GITHUB_ENV
        echo 'AWS_EC2_SSH_USER_NAME=${{ secrets.AWS_EC2_SSH_USER_NAME_PROD }}' >> $GITHUB_ENV
        echo 'AWS_EC2_SSH_HOST_NAME=${{ secrets.AWS_EC2_SSH_HOST_NAME_PROD }}' >> $GITHUB_ENV
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get -y install crossbuild-essential-arm64
        sudo apt-get -y install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu clang

    - name: Cache OpenCV build
      id: opencv_build_cache
      uses: actions/cache@v2
      with:
        path: ./.build-opencv
        key: opencv-build

    - name: Build OpenCV
      if: steps.opencv_build_cache.outputs.cache-hit != 'true'
      run: |
        mkdir -p ./.build-opencv && cd ./.build-opencv
        
        wget -O opencv.zip https://github.com/opencv/opencv/archive/4.x.zip
        wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/4.x.zip
        
        unzip opencv.zip && rm opencv.zip
        unzip opencv_contrib.zip && rm opencv_contrib.zip
        
        mkdir -p build && cd build
        
        echo 'find_program(CMAKE_C_COMPILER NAMES aarch64-linux-gnu-gcc)' >> ../opencv-4.x/platforms/linux/aarch64-gnu.toolchain.cmake
        echo 'find_program(CMAKE_CXX_COMPILER NAMES aarch64-linux-gnu-g++)' >> ../opencv-4.x/platforms/linux/aarch64-gnu.toolchain.cmake
        
        cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=NO \
        -DCMAKE_TOOLCHAIN_FILE=../opencv-4.x/platforms/linux/aarch64-gnu.toolchain.cmake \
        -DCMAKE_INSTALL_PREFIX=/opt/opencv -DBUILD_DOCS=OFF -DBUILD_EXAMPLES=OFF \
        -DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF -DBUILD_opencv_java=OFF \
        -DBUILD_opencv_python=OFF -DOPENCV_EXTRA_MODULES_PATH=../opencv_contrib-4.x/modules \
        ../opencv-4.x
        
        make -j8 && make install
    
    - name: Cache cargo registry
      uses: actions/cache@v2
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Cache cargo build
      uses: actions/cache@v2
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Cache cargo index
      uses: actions/cache@v2
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: aarch64-unknown-linux-musl

    - name: Build server
      run: |
        OPENCV_LINK_LIBS="opencv_imgproc,opencv_face,opencv_objdetect,opencv_dnn,opencv_dnn_objdetect,opencv_core,ippiw,ittnotify,ippicv,liblibprotobuf,z"
        OPENCV_LINK_PATHS=/opt/opencv/lib,/opt/opencv/lib/opencv4/3rdparty,/usr/lib/x86_64-linux-gnu
        OPENCV_INCLUDE_PATHS=/opt/opencv/include/opencv4
        cargo build --release --target aarch64-unknown-linux-musl

    - name: Build front
      run: |
        wget -qO- https://github.com/thedodd/trunk/releases/download/v0.16.0/trunk-x86_64-unknown-linux-gnu.tar.gz | tar -xzf-
        ./trunk build --target ./front/index.html --dist ./dist
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ env.AWS_DEPLOYER_ROLE_ARN }}
        role-session-name: github-actions-${{ github.run_id }}
        aws-region: ap-northeast-1
    
    - name: Deploy to production
      env:
        SSH_URI: ${{ env.AWS_EC2_SSH_USER_NAME }}@${{ env.AWS_EC2_SSH_HOST_NAME }}
      run: |
        aws ec2 authorize-security-group-ingress --group-id ${{ env.AWS_EC2_SECURITY_GROUP_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
        
        echo "${{ secrets.AWS_EC2_SSH_PRIVATE_KEY_PROD }}" > private_key
        chmod 600 private_key
        
        ssh -oStrictHostKeyChecking=no -i private_key ${{ env.SSH_URI }} "sudo systemctl stop uma-receipt-generator-web.service"
        scp -i private_key ./target/aarch64-unknown-linux-gnu/release/server ${{ env.SSH_URI }}:/home/admin/uma-receipt-generator-web
        scp -i private_key -r ./target/aarch64-unknown-linux-gnu/release/dist ${{ env.SSH_URI }}:/home/admin/uma-receipt-generator-web
        scp -i private_key -r ./.env.example ${{ env.SSH_URI }}:/home/admin/uma-receipt-generator-web/.env
        ssh -oStrictHostKeyChecking=no -i private_key ${{ env.SSH_URI }} "sudo systemctl start uma-receipt-generator-web.service"
        
        aws ec2 revoke-security-group-ingress --group-id ${{ env.AWS_EC2_SECURITY_GROUP_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
